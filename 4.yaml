4 Create a snapshot of the existing etcd instance running at https://127.0.0.1:2379 saving the snapshot to /srv/data/etcd-snapshot.db

Next, restore an existing, previous snameshot located at /var/lib/backup/etcd-snapshot-previous.db.

The following TLS certificates/key are supplied for connecting to the server with etcdctl:

CA certificate: /opt/KUIN00601/ca.crt Client certificate: /opt/KUIN00601/etcd-client.crt Clientkey:/opt/KUIN00601/etcd-client.key

Answer:

1.  kubernetes.io ---> "ETCD" ('Operating etcd clusters for Kubernetes | Kubernetes')
                                                                                  
  ----> Ctrl+F 'SnapShots' (Backing up an etcd cluster) 
  
  ----> Ctrl+F 'cacert' 

original: ETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 \
          --cacert=<trusted-ca-file> --cert=<cert-file> --key=<key-file> \
          snapshot save <backup-file-location>

INSERT VALUES:

  ETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 --cacert=/opt/KUIN00601/ca.crt --cert=/opt/KUIN00601/etcd-client.crt --key=/opt/KUIN00601/etcd-client.key snapshot save /srv/data/etcd-snapshot.db

2.  "Next, restore an existing, previous snameshot located at /var/lib/backup/etcd-snapshot-previous.db."

    run same command EXEPT replace "snapshot save /srv/data/... " with "snapshot restore /snapshot/location/file"

ETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 --cacert=/opt/KUIN00601/ca.crt --cert=/opt/KUIN00601/etcd-client.crt --key=/opt/KUIN00601/etcd-client.key snapshot restore /var/lib/backup/etcd-snapshot-previous.db


